
////

Swift/T leaf function guide, asciidoc format
http://www.mcs.anl.gov/exm/local/guides/leaf.html

////

:toc:
:numbered:

////
Settings:
////
:miscellaneous.newline: \n

= Swift/T Leaf Function Guide

This page documents the methods available to connect Swift/T to
leaf tasks that may be C, C++, or Fortran functions (native code).

Links:

* link::swift.html[General documentation for Swift/T]
* http://www.tcl.tk[Tcl documentation]
* http://www.swig.or[SWIG]

== Overview

Two methods are available for connecting a leaf function: simple mode
and advanced mode.  Both call to Tcl.  It is easy to call from Tcl to
native code, as presented in this guide.  We tap into
http://www.swig.or[SWIG] which allows us to use a standard
language-language tool to help automate this process.  (SWIG
is a nice skill to have in general, so the techniques here are usable
outside Swift as well!)

The modes have separate syntax:

*Simple:*
----
(int o) f(int i) "my_pkg" "version"
[ "set <<o>> [ f <<i>> ]" ];
----

Thus, in the simple mode the user specifies the exact Tcl line to
execute.  Data dependencies are handled by Swift.  Thus, that
Tcl line runs _after_ +i+ has a value and +o+ is a writable variable.

More complex Tcl programming can be done on that line.  However,
it is probably best to pack any additional logic into the Tcl
function +f+.

*Advanced:*
----
(int o) f(int i) "my_pkg" "version" "f";
----

In the advanced mode, +f+ is issued _before_ +i+ has a value.  The
user must use the Turbine API to set up execution dependent on +i+.
This guide will demonstrate how to do that.

Additionally, you may call Swift/T from native code.

== Examples

Complete code samples for each example are found in this tar file:

* link:examples.tar.gz[] (12 KB)

Note: In many scripts, we use shell options +set -ex+.

== Simple mode

Calling Tcl from Swift in simple mode is easy.  However, the user
does have to have a basic understanding of Tcl.  In typical cases, the
user will want to make a Tcl package so that multiple complex Tcl
functions can be called, which may link to native code.

=== Complete example 1: Pure Tcl function

Consider the Tcl source file +f.tcl+:
----
include::examples/1/f.tcl[]
----

This simply defines a function +f+ that adds two numbers together.
Tcl command +puts+ prints the result (as +puts()+ in C).  Thus,
writing a Tcl function for Swift involves 1) creating a namespace
(which will be used to group functions into a package) and 2) defining
Tcl functions to call.

It may be tested with this test (+test-f-1.tcl+):
----
include::examples/1/test-f-1.tcl[]
----

Calling this from the shell looks like this:
----
include::examples/1/test-f-1.sh[]
----
(On your system, the Tcl shell +tclsh+ may be called +tclsh8.5+)

Thus, to load this into Swift, we need to be able to 1) load +f.tcl+
and 2) invoke it.  To make it easy to load +f.tcl+, we create a Tcl
package for it.  This is done with a simple Tcl line that groups
together a package name.  Conventionally this is put in
+make-package.tcl+:
----
include::examples/1/make-package.tcl[]
----

This simply includes the name, version, and Tcl source files to put in
the package.  Multiple +-source+ arguments may be used.

The Tcl package is represented in a file that must be called
+pkgIndex.tcl+.  This directory containing this file is found by Tcl
via the +TCLLIBPATH+ variable.  (This is similar to +LD_LIBRARY_PATH+,
Java's +CLASSPATH+, Python's +PYTHONPATH+, etc.)  Note that
+TCLLIBPATH+ is space-separated (which makes for easier Tcl
processing).

We create +pkgIndex.tcl+ from the shell:
----
include::examples/1/make-package.sh[]
----

Now, we can test our function +f+ by accessing through the package
(instead of a simple +source+ command).  First the Tcl to load and run
the package (+test-f-2.tcl+):
----
include::examples/1/test-f-2.tcl[]
----

Now, invoke this test from the shell (+test-f-2.sh+):
----
include::examples/1/test-f-2.sh[]
----

The next step is to call this from Swift.  First, define the typed
Swift call to the external Tcl function +f+ (+f.swift+):
----
include::examples/1/f.swift[]
----

Then, build a simple Swift test script to try it (+test-f.swift+):
----
include::examples/1/test-f.swift[]
----

Now, make the package available to Turbine and run it:
----
include::examples/1/test-f.sh[]
----

*Conclusion:* Now you can make many concurrent calls to a simple Tcl
function using Swift.

=== Complete example 2: Simple C function

This section describes how to call C functions concurrently from Swift.

==== Establish the C library

Consider the following target C library header (+g.h+):
----
include::examples/2/g.h[]
----
implemented with (+g.c+):
----
include::examples/2/g.c[]
----
This function is normally called as (+test-g.c+):
----
include::examples/2/test-g.c[]
----
It may be compiled and run with (+test-g.sh+):
----
include::examples/2/test-g.sh[]
----
----
include::examples/2/run-g.sh[]
----

==== Export the C library as a Tcl package

Now, we would like to call many concurrent instances of +g()+.  First,
we need to make the Tcl package.

First, we run SWIG on the header:
----
include::examples/2/swig-g.sh[]
----
SWIG produces +g_wrap.c+.  Compile this and create a Tcl package
(+test-swig-g.sh+):
----
include::examples/2/test-swig-g.sh[]
----
This produces +libg.so+ and the Tcl package file +pkgIndex.tcl+.
We test this from Tcl (+test-g.tcl+):
----
include::examples/2/test-g.tcl[]
----
This is run from the shell as (+test-g-tcl.sh+):
----
include::examples/2/test-g-tcl.sh[]
----

==== Call the Tcl package from Swift (one-shot)

Then, we bring the Tcl package into Swift (+test-g-1.swift+):
----
include::examples/2/test-g-1.swift[]
----
Compile and run (+test-g-1.sh+):
----
include::examples/2/test-g-1.sh[]
----

==== Call the Tcl package from Swift concurrently

Write a foreach loop around the call to +g+ (+test-g-n.swift+):
----
include::examples/2/test-g-n.swift[]
----
Compile and run (+test-g-n.swift+):
----
include::examples/2/test-g-n.sh[]
----

Thus, providing 1 worker for each loop iteration yields perfect
speedup.  Note that we had to provide 8 MPI processes: one for each of
the 6 loop iterations, one Turbine engine, and one ADLB server.

=== Complete example 3: C function with binary data

In this case, we pass binary data in a byte array between Swift and C.

The application in this case consumes a binary file containing
double precision integers.  It manipulates the data in Swift and passes
it to a C library.  The C library returns the sum of the numbers
as an array of double precision numbers of length 1.

==== Create the data set

First, we create our binary file using the provided
+turbine-write-doubles+/+turbine-read-doubles+ tools
(+create-data.sh+):
----
include::examples/3/create-data.sh[]
----
Simple manipulation can be performed in Swift as (+test-b-simple.swift+):
----
include::examples/3/test-b-simple.swift[]
----
+test-b-simple.sh+:
----
include::examples/3/test-b-simple.sh[]
----

==== Define the C function

Our C function is (+b.c+):
----
include::examples/3/b.c[]
----
It may be tested from C with (+test-b.c+):
----
include::examples/3/test-b.c[]
----
+test-b.sh+:
----
include::examples/3/test-b.sh[]
----

==== Create the Tcl package

Build the Tcl package with (+swig-b.sh+):
----
include::examples/3/swig-b.sh[]
----

Since the blob pointer is of type +void*+, we need to wrap the C
function in some helper Tcl code to transmit blob data to the typed C
function.  This is performed in +b.tcl+:
----
include::examples/3/b.tcl[]
----
Thus, Swift calls the Tcl wrapper, which calls the C function.
Additional documentation for writing Tcl wrappers that use the Turbine API
may be found in the link:internals.html[Turbine Internals Guide];
the +blobutils+ tools are described in the
link:internals.html#_blob_manipulation[blobs section].

// TODO: complete the blobs section

Note that we return blob containing a pointer to freshly allocated
memory to Swift.  The system will release this memory.

==== Call from Swift

The Swift code to pass the blob to +b()+ is as follows
(+test-b.swift+):
----
include::examples/3/test-b.swift[]
----
+test-b-swift.sh+:
----
include::examples/3/test-b-swift.sh[]
----

=== Complete example 4: Calling a Fortran function

In this example, we call Fortran from Swift.  We do this by wrapping
the Fortran function in a C++ wrapper by using
http://fortwrap.sourceforge.net[FortWrap].  Then, we wrap for Swift by
using SWIG.

This example will demonstrate multiplying +y=A*x+ using Swift to call
a user Fortran library, which in turn calls the BLAS function
+dgemv+.  This demonstrates the generality of our model.

[latex]
\begin{equation*}
Ax=y \Longleftrightarrow
\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}
\begin{bmatrix}   5   \\   6   \end{bmatrix} =
\begin{bmatrix}   17  \\  39   \end{bmatrix}
\end{equation*}

==== Establish the Fortran function

Consider the Fortran function (+mvm.f+):
----
include::examples/4/mvm.f[]
----
A test program to run this is (+test-mvm.f+):
----
include::examples/4/test-mvm.f[]
----
It is built and run with (+test-mvm.sh+):
----
include::examples/4/test-mvm.sh[]
----

FortWrap will scan +mvm.f+ and produce the C++ files +FortFuncs.h+ and
+FortFuncs.cpp+, which we wrap with SWIG to produce a Tcl function
called +FortFuncs_MVM+.  We can call this from Swift.

==== Write the Swift code and Tcl wrapper

Our goal is to rewrite +test-mvm.f+ in Swift so we can call +MVM+
concurrently on many processors.  Our Swift replacement is
(+test-mvm.swift+):
----
include::examples/4/test-mvm.swift[]
----

Our Tcl wrapper converts the Tcl call to +mvm+ on blob arguments
to the Tcl call to +FortFuncs_MVM+ on pointers.  This is performed
similarly to the C example above (+mvm.tcl+).

==== Build and run

Now, we build everything (+build.sh+):
----
include::examples/4/build.sh[]
----
We run it in Swift with (+test-mvm-swift.sh+):
----
include::examples/4/test-mvm-swift.sh[]
----
This produces:
----
include::examples/4/test-mvm-swift.out[]
----

== Advanced mode

In this mode, the user provides the Swift/T runtime with dataflow
information so that more complex operations may be performed.

=== Complete example 5: Leaf task with dataflow

When using the advanced syntax, the final argument is the name of a
Tcl function:
----
(int o) f(int i) "my_pkg" "version" "f";
----

This function is called _before_ +i+ is set.  Thus, +f+ must issue a
Turbine +rule+ statement to schedule real leaf work when +i+ is set.

Consider the following Tcl code (+f.tcl+):
----
include::examples/5/f.tcl[]
----
In this case, Tcl function +f_impl+ is the _implementation_: the
actual code the user desires to call.  This may be an existing Tcl
routine or linkage to native code as described above.  It consumes two
Tcl integers and returns their sum as a Tcl integer.

Two function, +f+ and +f_body+, are required to connect this to
Swift/T.  +f+ is the _interface_: it is called by Swift/T when the
call is issued but +x+ and +y+ may not yet have values.  The Tcl
variables +x+ and +y+ are the Turbine Datum (TD) identifiers, not the
values, of Swift variables +x+ and +y+.  The outputs are packed in Tcl
list +outputs+ and the inputs are in Tcl list +inputs+.

When +x+ and +y+ are stored elsewhere, the Swift/T runtime evaluates the
action item in the rule: +"my_pkg::f_body $z $x $y"+.  Thus, +f_body+
receives the TDs for +z+, +x+, and +y+.  It retrieves the values of
+x+ and +y+, calls +f_impl+ to compute the value for +z+, and stores
it.  Now, any Swift/T statements (rules) dependendent on +z+ will be
executed, and so on.

This Tcl code is called by the following simple Swift/T test
(+test-f.swift+):
----
include::examples/5/test-f.swift[]
----

For more information about the APIs used to store/retrieve Swift/T
data and issue rules, see link:turbine-internals.html[Turbine
Internals].

The interface/body/implementation pattern is used by much of the
Swift/T library.  The source of this library is found in the Turbine
installation directory.  The Swift headers are in +turbine/export+ and
their Tcl implementations are in +turbine/lib+.  This is a good way to
find out what else may be done.

=== Complete example 6: Calling an MPI library

Calling an existing MPI library is similar to calling any other C
code.  In this example, we will show how to obtain the new
communicator from Swift/T.  This functionality only works when using
Swift/T on an MPI-3 implementation such as MPICH 3.0.

==== Identify the function

Consider the  following MPI library function (+f.c+):
----
include::examples/6/f-snip-1.c[]
----

This function accepts an MPI communicator +comm+ freshly created for
the task.  It also accepts user data +k+ and must return a +double+.
Rank 0 in the task communicator returns the real value- the other
ranks may cooperate in the computation but do not interact with the
data store.

Communication on +comm+ is isolated from Swift/T implementation
communication.  Point-to-point messaging and collectives (such as
+MPI_Barrier()+, as shown) are allowed.

We desire to call this from Swift as (+test-f.swift+):
----
include::examples/6/test-f.swift[]
----

In the declaration, +@par+ allows us to call the function as a
parallel function.  At call time, we use +@par=2+.

We wrap this function with SWIG and a Swift/T interface/body:
----
include::examples/6/f.tcl[]
----

This differs from the single-process task (example 5) in that it
passes the additional parallelism information in variable +args+ into
the +rule+ statement so that Swift/T will allocate 2 workers for the
task.

By convention, only rank 0 contacts the data store to store result
+z+.  If multiple processes write to +z+, a run-time error will
result.

At run time, ensure Turbine has enough workers to run the user task:
----
include::examples/6/run-f.sh[]
----

== Calling Swift/T from native code

=== Complete example 7: Calling Swift/T from C

Swift/T itself may be called from native code as a library.

==== Compilation

The Turbine installation directory contains the +turbine.h+ header and
the +libtclturbine.so+ shared object.  See +build.sh+ for the example
compiler commands.

==== Call

The call to Swift/T requires the MPI communicator in which to run, the
compiled Swift/T program to run, a C-formatted +argc+/+argv+, and an
output pointer.

The C call to Swift/T is written as (+controller.c+):

----
turbine_code rc = turbine_run(comm, "test-f.tcl", argc, argv, output);
----

where +argc+/+argv+ are C-style arguments, and +output+ is the buffer
to hold the output.

The Swift script is a normal Swift script except for the call to
+turbine_run_output_blob()+, which returns data to the controller
(+test-f.swift+):

----
include::examples/7/test-f.swift[]
----

The controller MPI program is run as: (+run.sh+):

----
include::examples/7/run.sh[]
----

producing:

----
include::examples/7/output.txt[]
----

Note that only rank 0 in the Swift/T communicator has access to the
+output+ data.

////
Local Variables:
mode: doc
eval: (auto-fill-mode 1)
End:
////
